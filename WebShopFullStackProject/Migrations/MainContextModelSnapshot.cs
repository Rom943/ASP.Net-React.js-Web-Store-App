// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopApi.Context;

#nullable disable

namespace ShopApi.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<int>("CartsID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsID")
                        .HasColumnType("int");

                    b.HasKey("CartsID", "ProductsID");

                    b.HasIndex("ProductsID");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("ShopApi.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ShopApi.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteManagerID")
                        .HasColumnType("int");

                    b.Property<int?>("TbnImgId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SiteManagerID");

                    b.HasIndex("TbnImgId")
                        .IsUnique()
                        .HasFilter("[TbnImgId] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShopApi.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ShipingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ShopApi.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("GalleryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GalleryID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ShopApi.Models.ImageGallery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("RelatedTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ImageGalleries");
                });

            modelBuilder.Entity("ShopApi.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rank")
                        .HasColumnType("float");

                    b.Property<int?>("SellerID")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("TbnImgId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("SellerID");

                    b.HasIndex("TbnImgId")
                        .IsUnique()
                        .HasFilter("[TbnImgId] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopApi.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ShopApi.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<double>("Rank")
                        .HasColumnType("float");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Reveiws");
                });

            modelBuilder.Entity("ShopApi.Models.SeedingInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsSeedingDone")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("SeedingInfo");
                });

            modelBuilder.Entity("ShopApi.Models.Seller", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TbnImgId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TbnImgId")
                        .IsUnique()
                        .HasFilter("[TbnImgId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("ShopApi.Models.SiteManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SiteManagers");
                });

            modelBuilder.Entity("ShopApi.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TbnImgId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TbnImgId")
                        .IsUnique()
                        .HasFilter("[TbnImgId] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("ShopApi.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApi.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopApi.Models.Cart", b =>
                {
                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("ShopApi.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopApi.Models.Category", b =>
                {
                    b.HasOne("ShopApi.Models.SiteManager", "SiteManager")
                        .WithMany("Categories")
                        .HasForeignKey("SiteManagerID");

                    b.HasOne("ShopApi.Models.Image", "TbnImg")
                        .WithOne("Category")
                        .HasForeignKey("ShopApi.Models.Category", "TbnImgId");

                    b.Navigation("SiteManager");

                    b.Navigation("TbnImg");
                });

            modelBuilder.Entity("ShopApi.Models.Customer", b =>
                {
                    b.HasOne("ShopApi.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("ShopApi.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopApi.Models.Image", b =>
                {
                    b.HasOne("ShopApi.Models.ImageGallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryID");

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("ShopApi.Models.Product", b =>
                {
                    b.HasOne("ShopApi.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("ShopApi.Models.ImageGallery", "Gallery")
                        .WithOne("Product")
                        .HasForeignKey("ShopApi.Models.Product", "GalleryId");

                    b.HasOne("ShopApi.Models.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerID");

                    b.HasOne("ShopApi.Models.Image", "TbnImg")
                        .WithOne("Product")
                        .HasForeignKey("ShopApi.Models.Product", "TbnImgId");

                    b.Navigation("Category");

                    b.Navigation("Gallery");

                    b.Navigation("Seller");

                    b.Navigation("TbnImg");
                });

            modelBuilder.Entity("ShopApi.Models.Purchase", b =>
                {
                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerID");

                    b.HasOne("ShopApi.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductID");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopApi.Models.Review", b =>
                {
                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerID");

                    b.HasOne("ShopApi.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopApi.Models.Seller", b =>
                {
                    b.HasOne("ShopApi.Models.Image", "TbnImg")
                        .WithOne("Seller")
                        .HasForeignKey("ShopApi.Models.Seller", "TbnImgId");

                    b.HasOne("ShopApi.Models.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("ShopApi.Models.Seller", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbnImg");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopApi.Models.SiteManager", b =>
                {
                    b.HasOne("ShopApi.Models.User", "User")
                        .WithOne("SiteManager")
                        .HasForeignKey("ShopApi.Models.SiteManager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopApi.Models.User", b =>
                {
                    b.HasOne("ShopApi.Models.Image", "TbnImg")
                        .WithOne("User")
                        .HasForeignKey("ShopApi.Models.User", "TbnImgId");

                    b.Navigation("TbnImg");
                });

            modelBuilder.Entity("ShopApi.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopApi.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Purchases");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShopApi.Models.Image", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopApi.Models.ImageGallery", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ShopApi.Models.Product", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShopApi.Models.Seller", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopApi.Models.SiteManager", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ShopApi.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Seller");

                    b.Navigation("SiteManager");
                });
#pragma warning restore 612, 618
        }
    }
}
